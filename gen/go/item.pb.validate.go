// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: item.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _item_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetItemRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetItemRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetItemRequestValidationError is the validation error returned by
// GetItemRequest.Validate if the designated constraints aren't met.
type GetItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetItemRequestValidationError) ErrorName() string { return "GetItemRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetItemRequestValidationError{}

// Validate checks the field values on GetItemResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetItemResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Price

	return nil
}

// GetItemResponseValidationError is the validation error returned by
// GetItemResponse.Validate if the designated constraints aren't met.
type GetItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetItemResponseValidationError) ErrorName() string { return "GetItemResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetItemResponseValidationError{}

// Validate checks the field values on GetItemsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetItemsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetItemsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetItemsResponseValidationError is the validation error returned by
// GetItemsResponse.Validate if the designated constraints aren't met.
type GetItemsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetItemsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetItemsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetItemsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetItemsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetItemsResponseValidationError) ErrorName() string { return "GetItemsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetItemsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetItemsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetItemsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetItemsResponseValidationError{}

// Validate checks the field values on PostItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PostItemRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 30 {
		return PostItemRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 30 runes, inclusive",
		}
	}

	if !_PostItemRequest_Name_Pattern.MatchString(m.GetName()) {
		return PostItemRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9\\\\s]+$\"",
		}
	}

	if m.GetPrice() <= 0 {
		return PostItemRequestValidationError{
			field:  "Price",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// PostItemRequestValidationError is the validation error returned by
// PostItemRequest.Validate if the designated constraints aren't met.
type PostItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostItemRequestValidationError) ErrorName() string { return "PostItemRequestValidationError" }

// Error satisfies the builtin error interface
func (e PostItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostItemRequestValidationError{}

var _PostItemRequest_Name_Pattern = regexp.MustCompile("^[a-zA-Z0-9\\s]+$")

// Validate checks the field values on PostItemsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PostItemsRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PostItemsRequestValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PostItemsRequestValidationError is the validation error returned by
// PostItemsRequest.Validate if the designated constraints aren't met.
type PostItemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostItemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostItemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostItemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostItemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostItemsRequestValidationError) ErrorName() string { return "PostItemsRequestValidationError" }

// Error satisfies the builtin error interface
func (e PostItemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostItemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostItemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostItemsRequestValidationError{}
